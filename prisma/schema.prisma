// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model TopUser {
  id      Int      @id @default(autoincrement())
  profile Profile?
}

model Credential {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  profile   Profile?
  password  String
  role      String   @default("USER")
  createdAt DateTime @default(now())
}

model Manufacturer {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  models    Model[]
  createdAt DateTime @default(now())
}

model Model {
  id              Int          @id @default(autoincrement())
  name            String
  manufacturereID Int
  createdAt       DateTime     @default(now())
  manufacturer    Manufacturer @relation(fields: [manufacturereID], references: [id], onDelete: Cascade)

  @@unique([name, manufacturereID])
}

model Profile {
  id          Int    @id @default(autoincrement())
  firstName   String
  lastName    String
  phoneNumber String
  imageURL    String

  user         TopUser    @relation(fields: [userId], references: [id])
  credentail   Credential @relation(fields: [credentailId], references: [id])
  userId       Int        @unique // relation scalar field (used in the `@relation` attribute above)
  credentailId Int        @unique
}
